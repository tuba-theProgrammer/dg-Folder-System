{"ast":null,"code":"import * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  const valueRef = React.useRef(value);\n  valueRef.current = value;\n  const onValueChangeRef = React.useRef(onValueChange);\n  onValueChangeRef.current = onValueChange;\n  const onHighlightChangeRef = React.useRef(onHighlightChange);\n  onHighlightChangeRef.current = onHighlightChange;\n  React.useEffect(() => {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n    setValueState(state.selectedValue);\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur;\n\n      // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(() => {\n    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n    if (state.highlightedIndex === -1) {\n      var _onHighlightChangeRef;\n      (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, null);\n    } else {\n      var _onHighlightChangeRef2;\n      (_onHighlightChangeRef2 = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef2.call(onHighlightChangeRef, options[state.highlightedIndex]);\n    }\n  }, [state.highlightedIndex, options]);\n}\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  const {\n    value: controlledValue,\n    defaultValue,\n    onChange: onValueChange,\n    onHighlightChange,\n    options,\n    optionComparer\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const [value, setValueState] = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  });\n  const previousValueRef = React.useRef(null);\n  const [state, dispatch] = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedIndex: -1,\n    selectedValue: value\n  });\n  const optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(() => {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setControlledValue,\n      value: controlledValue,\n      props: propsRef.current\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}","map":{"version":3,"names":["React","unstable_useControlled","useControlled","ActionTypes","areArraysEqual","useReducerReturnValueHandler","state","value","options","optionComparer","setValueState","onValueChange","onHighlightChange","valueRef","useRef","current","onValueChangeRef","onHighlightChangeRef","useEffect","Array","isArray","selectedValue","_onValueChangeRef$cur","call","highlightedIndex","_onHighlightChangeRef","_onHighlightChangeRef2","useControllableReducer","internalReducer","externalReducer","props","controlledValue","defaultValue","onChange","propsRef","controlled","default","name","previousValueRef","dispatch","useReducer","optionComparerRef","undefined","type","setControlledValue"],"sources":["/home/tuba/Work-Folder/MTechub-Assigned Task/dg-Folder-System/Front-end/node_modules/@mui/base/ListboxUnstyled/useControllableReducer.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  const valueRef = React.useRef(value);\n  valueRef.current = value;\n  const onValueChangeRef = React.useRef(onValueChange);\n  onValueChangeRef.current = onValueChange;\n  const onHighlightChangeRef = React.useRef(onHighlightChange);\n  onHighlightChangeRef.current = onHighlightChange;\n  React.useEffect(() => {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur;\n\n      // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(() => {\n    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n    if (state.highlightedIndex === -1) {\n      var _onHighlightChangeRef;\n\n      (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, null);\n    } else {\n      var _onHighlightChangeRef2;\n\n      (_onHighlightChangeRef2 = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef2.call(onHighlightChangeRef, options[state.highlightedIndex]);\n    }\n  }, [state.highlightedIndex, options]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  const {\n    value: controlledValue,\n    defaultValue,\n    onChange: onValueChange,\n    onHighlightChange,\n    options,\n    optionComparer\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const [value, setValueState] = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  });\n  const previousValueRef = React.useRef(null);\n  const [state, dispatch] = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedIndex: -1,\n    selectedValue: value\n  });\n  const optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(() => {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setControlledValue,\n      value: controlledValue,\n      props: propsRef.current\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}