"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguagePicker = void 0;
var react_1 = __importDefault(require("react"));
var material_1 = require("@mui/material");
var Clear_1 = __importDefault(require("@mui/icons-material/Clear"));
var BorderColor_1 = __importDefault(require("@mui/icons-material/BorderColor"));
var util_1 = require("./util");
var LanguageChoice_1 = __importDefault(require("./LanguageChoice"));
var LgExact_1 = require("./index/LgExact");
var LgScripts_1 = require("./index/LgScripts");
var LgScriptName_1 = require("./index/LgScriptName");
var LgFontMap_1 = require("./index/LgFontMap");
var bcp47_1 = require("./bcp47");
var langTags_1 = require("./langTags");
var useDebounce_1 = __importDefault(require("./useDebounce"));
var GrowingSpacer_1 = require("./GrowingSpacer");
var ChangeName_1 = __importDefault(require("./ChangeName"));
var getDisplayName_1 = require("./getDisplayName");
var MAXOPTIONS = 50;
var menuWidth = { width: 200 };
var StyledDialog = (0, material_1.styled)(material_1.Dialog)(function () { return ({
    '& .MuiDialog-paperScrollPaper': {
        marginBottom: 'auto',
        width: '90%',
    },
}); });
var LanguagePicker = function (props) {
    var _a;
    var disabled = props.disabled;
    var value = props.value, name = props.name, font = props.font, setCode = props.setCode, setName = props.setName, setFont = props.setFont, setInfo = props.setInfo, t = props.t;
    var displayName = props.displayName;
    var _b = react_1.default.useState(false), open = _b[0], setOpen = _b[1];
    var _c = react_1.default.useState(value), curValue = _c[0], setCurValue = _c[1];
    var _d = react_1.default.useState(name), curName = _d[0], setCurName = _d[1];
    var _e = react_1.default.useState(font), curFont = _e[0], setCurFont = _e[1];
    var _f = react_1.default.useState(true), secondary = _f[0], setSecondary = _f[1];
    var _g = react_1.default.useState(''), response = _g[0], setResponse = _g[1];
    var _h = react_1.default.useState(), tag = _h[0], setTag = _h[1];
    var _j = react_1.default.useState(''), defaultScript = _j[0], setDefaultScript = _j[1];
    var _k = react_1.default.useState(''), defaultFont = _k[0], setDefaultFont = _k[1];
    var _l = react_1.default.useState(Array()), fontOpts = _l[0], setFontOpts = _l[1];
    var _m = react_1.default.useState(false), newName = _m[0], setNewName = _m[1];
    var langEl = react_1.default.useRef();
    var debouncedResponse = (0, useDebounce_1.default)(response, 500);
    var TAB = 9;
    var SHIFT = 16;
    var CTRL = 17;
    var IpaTag = 'fonipa';
    if (!LgScriptName_1.scriptName.hasOwnProperty(IpaTag))
        LgScriptName_1.scriptName[IpaTag] = t.phonetic;
    var respFormat = function (name, tagVal) { return "".concat(name, " (").concat(tagVal, ")"); };
    var handleClickOpen = function (e) {
        if (disabled)
            return;
        if (e.keyCode && [TAB, SHIFT, CTRL].indexOf(e.keyCode) !== -1)
            return;
        var found = (0, bcp47_1.bcp47Find)(curValue);
        if (curValue !== 'und') {
            if (found && !Array.isArray(found)) {
                var tagName = (0, getDisplayName_1.getDisplayName)(curName, found, displayName);
                setResponse(respFormat(tagName, curValue));
                setTag(found);
                selectFont(found);
                setDefaultScript(found.script);
                setDefaultFont(curFont);
            }
            else {
                var key = curValue.toLocaleLowerCase();
                if ((0, LgExact_1.hasExact)(key)) {
                    setResponse(respFormat(curName, curValue));
                    var langTag = langTags_1.langTags[(0, LgExact_1.getExact)(key)[0]];
                    setTag(langTag);
                    selectFont(langTag);
                    setDefaultScript(langTag.script);
                    setDefaultFont(curFont);
                }
                else {
                    handleClear();
                }
            }
        }
        setOpen(true);
    };
    var handleClear = function () {
        setFontOpts([]);
        setResponse('');
        setTag(undefined);
        setDefaultFont('');
        if (langEl.current)
            langEl.current.click();
    };
    var handleCancel = function () {
        setCurValue(value);
        setCurName(name);
        setCurFont(font);
        setTag(undefined);
        setDefaultScript('');
        setResponse('');
        setOpen(false);
    };
    var displayTag = function (tagP, val) {
        if (tagP && tagP.name) {
            var tagName = (0, getDisplayName_1.getDisplayName)(tagP.name, tagP, displayName);
            setResponse(respFormat(tagName, tagP.tag));
            setCurValue(val ? val : tagP.tag);
            setCurName(tagP.name);
        }
    };
    var handleSelect = function () {
        if (setCode)
            setCode(curValue);
        if (setName)
            setName(curName);
        if (setFont)
            setFont(curFont);
        if (setInfo && tag)
            setInfo(tag);
        if (tag) {
            displayTag(tag, curValue);
        }
        else {
            setResponse('');
        }
        setOpen(false);
    };
    var handleChange = function (e) {
        setResponse(e.target.value);
    };
    var addFontInfo = function (e) {
        setDefaultFont(e.target.value);
        setCurFont(e.target.value);
    };
    var safeFonts = [
        { value: 'NotoSansLatn', label: 'Noto Sans (Recommended)', rtl: false },
        { value: 'AnnapurnaSIL', label: 'Annapurna SIL (Indic)', rtl: false },
        { value: 'Scheherazade', label: 'Scheherazade (Arabic)', rtl: true },
        { value: 'SimSun', label: 'SimSun (Chinese)', rtl: false },
    ];
    var selectDefaultFont = function (code) {
        var fonts = LgFontMap_1.fontMap[code];
        setDefaultFont(fonts[0]);
        setCurFont(fonts[0]);
        setFontOpts(fonts);
    };
    var selectFont = function (tagP) {
        if (!tagP || tagP.tag === 'und')
            return;
        var parse = (0, bcp47_1.bcp47Parse)(tagP.tag);
        var script = parse.script ? parse.script : tagP.script;
        var region = parse.region ? parse.region : tagP.region;
        var code = script;
        if (region) {
            code = script + '-' + region;
            if (!LgFontMap_1.fontMap.hasOwnProperty(code)) {
                code = script;
            }
        }
        if (!LgFontMap_1.fontMap.hasOwnProperty(code)) {
            setDefaultFont(safeFonts[0].value);
            setCurFont(safeFonts[0].value);
            setFontOpts(safeFonts.map(function (f) { return f.value; }));
        }
        else
            selectDefaultFont(code);
    };
    var handleNewName = function () {
        setNewName(true);
    };
    var handleCloseName = function () {
        setNewName(false);
    };
    var handleSetName = function (name) {
        setCurName(name);
        var tagName = (0, getDisplayName_1.getDisplayName)(name, tag, displayName);
        if (tag)
            setResponse(respFormat(tagName, tag.tag));
    };
    react_1.default.useEffect(function () {
        if (response === '')
            handleClear();
    }, [response]);
    react_1.default.useEffect(function () {
        setCurValue(value);
        setCurName(name);
        setCurFont(font);
        setResponse(value !== 'und' ? name + ' (' + value + ')' : '');
    }, [value, name, font]);
    var handleScriptChange = function (tagP) { return function (e) {
        var val = e.target.value;
        setDefaultScript(val);
        var parse = (0, bcp47_1.bcp47Parse)(curValue);
        var script = parse.script ? parse.script : tagP === null || tagP === void 0 ? void 0 : tagP.script;
        if (script !== val) {
            var newTag = parse.language || 'und';
            if (val !== IpaTag)
                newTag += '-' + val;
            if (parse.region)
                newTag += '-' + parse.region;
            var found = (0, bcp47_1.bcp47Find)(newTag);
            if (found) {
                var firstFind = Array.isArray(found) ? found[0] : found;
                setTag(firstFind);
                var myTag_1 = firstFind.tag;
                if (val === IpaTag)
                    myTag_1 += "-".concat(IpaTag);
                else if (parse.variant && parse.variant !== IpaTag)
                    myTag_1 += '-' + parse.variant;
                if (parse.extension)
                    myTag_1 += '-' + parse.extension;
                parse.privateUse.forEach(function (i) {
                    myTag_1 += '-x-' + i;
                });
                displayTag(__assign(__assign({}, firstFind), { tag: myTag_1 }));
                if (val === IpaTag)
                    selectDefaultFont(IpaTag);
                else
                    selectFont(firstFind);
            }
        }
    }; };
    var selectScript = function (tagP) {
        var tagParts = (0, bcp47_1.bcp47Parse)(tagP.tag);
        selectFont(tagP);
        setDefaultScript(tagParts.script ? tagParts.script : tagP.script);
    };
    var scriptList = function (tagP) {
        if (!tagP)
            return [];
        return (0, LgScripts_1.getScripts)(tagP.tag.split('-')[0]).concat(IpaTag);
    };
    var handleLanguageClick = function () {
        if (tag)
            selectScript(tag);
        setTag(undefined);
    };
    var handleChoose = function (tagP) {
        var newTag = tagP;
        var found = (0, bcp47_1.bcp47Find)(response);
        var maxMatch = '';
        var tagList = [tagP.full, tagP.tag];
        if (tagP.iso639_3) {
            tagList.push(tagP.iso639_3);
            tagList.push(tagP.iso639_3 + '-' + tagP.script);
            if (tagP.region) {
                tagList.push(tagP.iso639_3 + '-' + tagP.region);
                tagList.push(tagP.iso639_3 + '-' + tagP.script + '-' + tagP.region);
            }
        }
        var parse = (0, bcp47_1.bcp47Parse)(response);
        if (parse.extlang && parse.language) {
            tagList.push(parse.language);
            tagList.push(parse.language + '-' + tagP.script);
            if (tagP.region) {
                tagList.push(parse.language + '-' + tagP.region);
                tagList.push(parse.language + '-' + tagP.script + '-' + tagP.region);
            }
        }
        if (tagP.tags) {
            tagList = tagList.concat(tagP.tags.map(function (p) { return p; }));
        }
        tagList.forEach(function (i) {
            var tLen = i.length;
            if (tLen > maxMatch.length) {
                if (i === response.slice(0, tLen)) {
                    if (response.length === tLen || response[tLen] === '-') {
                        maxMatch = i;
                    }
                }
            }
        });
        if (maxMatch !== '') {
            var newCode = tagP.tag;
            if (parse.variant && tagP.tag.indexOf(tagP.script) > 0) {
                newCode = tagP.tag.replace("-".concat(tagP.script), '');
            }
            newTag = __assign(__assign({}, tagP), { tag: newCode + response.slice(maxMatch.length) });
            displayTag(newTag);
        }
        setTag(newTag);
        if (maxMatch === '') {
            if (found === tagP) {
                newTag = __assign(__assign({}, tagP), { tag: response });
            }
            else if (Array.isArray(found) && found.indexOf(tagP) !== -1) {
                newTag = __assign(__assign({}, tagP), { tag: response });
            }
        }
        displayTag(newTag);
        selectScript(newTag);
        selectFont(newTag);
    };
    var mergeList = function (list, adds) {
        var result = list.filter(function (e) { return adds.filter(function (f) { return e === f; }).length > 0; });
        result = result.concat(list.filter(function (e) { return adds.filter(function (f) { return e === f; }).length === 0; }));
        return result.concat(adds.filter(function (e) { return list.filter(function (f) { return e === f; }).length === 0; }));
    };
    var optList = function () {
        if (!tag && response) {
            var list_1 = Array();
            debouncedResponse.split(' ').forEach(function (w) {
                if (w.length > 1) {
                    var wLangTags = (0, bcp47_1.bcp47Index)(w);
                    if (wLangTags) {
                        list_1 = mergeList(list_1, wLangTags);
                    }
                    else {
                        var token = (0, util_1.woBadChar)(w).toLocaleLowerCase();
                        if ((0, LgExact_1.hasExact)(token)) {
                            list_1 = mergeList(list_1, (0, LgExact_1.getExact)(token));
                        }
                    }
                }
            });
            debouncedResponse.split(' ').forEach(function (w) {
                if (w.length > 1) {
                    var lastDash = w.lastIndexOf('-');
                    if (lastDash !== -1) {
                        var wLangTags = (0, bcp47_1.bcp47Index)(w.slice(0, lastDash));
                        if (wLangTags)
                            list_1 = mergeList(list_1, wLangTags);
                    }
                    else {
                        var token_1 = (0, util_1.woBadChar)(w).toLocaleLowerCase();
                        if ((0, LgExact_1.hasPart)(token_1)) {
                            var tokLen_1 = token_1.length;
                            Object.keys((0, LgExact_1.getPart)(token_1)).forEach(function (k) {
                                if (list_1.length < MAXOPTIONS) {
                                    if (token_1 === k.slice(0, tokLen_1))
                                        list_1 = mergeList(list_1, (0, LgExact_1.getExact)(k));
                                }
                            });
                        }
                    }
                }
            });
            if (list_1.length > 0) {
                return (react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement(material_1.FormGroup, { row: true, sx: { justifyContent: 'flex-end' } },
                        react_1.default.createElement(material_1.FormControlLabel, { sx: { flexDirection: 'row-reverse', mr: 0 }, control: react_1.default.createElement(material_1.Checkbox, { checked: secondary, onChange: function (event) { return setSecondary(event.target.checked); }, value: "secondary" }), label: t.details })),
                    react_1.default.createElement(LanguageChoice_1.default, { list: list_1, secondary: secondary, choose: handleChoose, langTags: langTags_1.langTags, scriptName: LgScriptName_1.scriptName, displayName: displayName, t: t })));
            }
        }
        return react_1.default.createElement(react_1.default.Fragment, null);
    };
    return (react_1.default.createElement("div", { id: "LangBcp47" },
        react_1.default.createElement(material_1.TextField, { variant: "filled", margin: "dense", id: "lang-bcp47", label: t.language, required: true, style: { width: 300 }, value: value !== 'und' ? name + ' (' + value + ')' : '', onClick: handleClickOpen, onKeyDown: handleClickOpen, disabled: disabled ? disabled : false }),
        react_1.default.createElement(StyledDialog, { id: "LanguagePicker", open: open, onClose: handleCancel, "aria-labelledby": "form-dialog-title" },
            react_1.default.createElement(material_1.DialogTitle, { id: "form-dialog-title" }, t.selectLanguage),
            react_1.default.createElement(material_1.DialogContent, { dividers: true },
                react_1.default.createElement(material_1.TextField, { autoFocus: true, margin: "normal", id: "language", label: t.findALanguage, fullWidth: true, value: response, onChange: handleChange, onClick: handleLanguageClick, variant: "outlined", InputProps: {
                        ref: langEl,
                        endAdornment: (react_1.default.createElement(material_1.InputAdornment, { position: "end" },
                            react_1.default.createElement(material_1.IconButton, { edge: "end", "aria-label": "clear language", onClick: handleClear },
                                react_1.default.createElement(Clear_1.default, { color: "primary" })))),
                    } }),
                optList(),
                react_1.default.createElement(material_1.FormControlLabel, { control: react_1.default.createElement(material_1.TextField, { id: "select-script", select: true, sx: { width: 150, mx: 1 }, label: t.script, value: defaultScript, onChange: handleScriptChange(tag), style: { width: 400 }, SelectProps: {
                            MenuProps: __assign({ sx: menuWidth }),
                        }, helperText: '', margin: "normal", variant: "filled", required: true }, scriptList(tag)
                        .map(function (s) { return (react_1.default.createElement(material_1.MenuItem, { key: s, value: s }, LgScriptName_1.scriptName[s] + ' - ' + s)); })
                        .concat(scriptList(tag).includes(defaultScript)
                        ? []
                        : [
                            react_1.default.createElement(material_1.MenuItem, { key: defaultScript, value: defaultScript }, defaultScript),
                        ])), label: "" }),
                react_1.default.createElement(material_1.FormControlLabel, { control: react_1.default.createElement(material_1.TextField, { id: "select-font", select: true, sx: { width: 300, mx: 1 }, label: t.font, value: defaultFont, onChange: addFontInfo, SelectProps: {
                            MenuProps: __assign({ sx: menuWidth }),
                        }, helperText: '', margin: "normal", variant: "filled", required: true }, fontOpts.map(function (s) { return (react_1.default.createElement(material_1.MenuItem, { key: s, value: s }, s)); })), label: "" })),
            react_1.default.createElement(material_1.DialogActions, null,
                react_1.default.createElement("a", { href: "https://www.w3.org/International/questions/qa-choosing-language-tags", target: "_blank", rel: "noopener noreferrer" },
                    react_1.default.createElement(material_1.Typography, null, t.codeExplained)),
                curName !== '' && (react_1.default.createElement(material_1.Tooltip, { title: (_a = t.changeName) !== null && _a !== void 0 ? _a : 'Change name' },
                    react_1.default.createElement(material_1.IconButton, { color: "primary", size: "small", onClick: handleNewName },
                        react_1.default.createElement(BorderColor_1.default, { fontSize: "small" })))),
                react_1.default.createElement(GrowingSpacer_1.GrowingSpacer, null),
                react_1.default.createElement(material_1.Button, { onClick: handleCancel, color: "primary" },
                    react_1.default.createElement(material_1.Typography, null, t.cancel)),
                react_1.default.createElement(material_1.Button, { onClick: handleSelect, color: "primary", disabled: tag === undefined },
                    react_1.default.createElement(material_1.Typography, null, t.select)))),
        newName && (react_1.default.createElement(ChangeName_1.default, { isOpen: newName, onClose: handleCloseName, curName: curName, onNewName: handleSetName, t: t }))));
};
exports.LanguagePicker = LanguagePicker;
exports.default = exports.LanguagePicker;
